<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- The following three imports will include pipeline configurations for 
		both JaxrsRestPlainPipeline and JaxrsRestContentPipeline !!! -->
	<import
		resource="classpath:/org/hippoecm/hst/site/optional/jaxrs/SpringComponentManager-rest-jackson.xml" />
	<import
		resource="classpath:/org/hippoecm/hst/site/optional/jaxrs/SpringComponentManager-rest-plain-pipeline.xml" />
	<import
		resource="classpath:/org/hippoecm/hst/site/optional/jaxrs/SpringComponentManager-rest-content-pipeline.xml" />

	<!-- Your custom JAX-RS REST Plain Resource Providers will be added into 
		the following list !!! -->
	<bean id="customRestPlainResourceProviders"
		class="org.springframework.beans.factory.config.ListFactoryBean">
		<property name="sourceList">
			<list>
				<!-- Wrap your JAX-RS component by SingletonResourceProvider. -->
				<bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
					<constructor-arg>
						<bean class="org.example.resources.FooResource" />
					</constructor-arg>
				</bean>
				<bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
					<constructor-arg>
						<bean class="org.example.resources.BarResource" />
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>

	<!-- Your custom JAX-RS REST Content/Context Aware Resource Providers will 
		be added into the following list !!! -->
	<bean id="customRestContentResourceProviders"
		class="org.springframework.beans.factory.config.ListFactoryBean">
		<property name="sourceList">
			<list>
			</list>
		</property>
	</bean>

	<!-- Enabling to use '_format' parameter name instead of the CXF default 
		_type parameter name for the plain JAX-RS pipeline. Also, if you set 'additionalQueryString' 
		property, then all the JAX-RS requests will have the additional parameters 
		forcefully. For example, if you set it to '_type=json', then you can force 
		the output format to JSON format globally without considering 'Accept' HTTP 
		request header. -->
	<bean id="jaxrsRestPlainServiceQueryStringReplacingInterceptor"
		class="org.hippoecm.hst.jaxrs.cxf.QueryStringReplacingInterceptor">
		<property name="paramNameReplaces">
			<map>
				<!-- The following will replace '_format' parameter name with '_type' 
					parameter name before JAX-RS processing. -->
				<entry key="_format" value="_type" />
			</map>
		</property>
		<property name="additionalQueryString">
			<!-- The following will append additional query string before JAX-RS processing 
				<value>_type=json</value> -->
			<value>_type=json</value>
		</property>
	</bean>

	<!-- Enabling to use '_format' parameter name instead of the CXF default 
		_type parameter name for the Content/Context-Aware JAX-RS pipeline. Also, 
		if you set 'additionalQueryString' property, then all the JAX-RS requests 
		will have the additional parameters forcefully. For example, if you set it 
		to '_type=json', then you can force the output format to JSON format globally 
		without considering 'Accept' HTTP request header. -->
	<bean id="jaxrsRestContentServiceQueryStringReplacingInterceptor"
		class="org.hippoecm.hst.jaxrs.cxf.QueryStringReplacingInterceptor">
		<property name="paramNameReplaces">
			<map>
				<!-- The following will replace '_format' parameter name with '_type' 
					parameter name before JAX-RS processing. -->
				<entry key="_format" value="_type" />
			</map>
		</property>
		<property name="additionalQueryString">
			<!-- The following will append additional query string before JAX-RS processing 
				<value>_type=json</value> -->
			<value>_type=json</value>
		</property>
	</bean>

	<!-- Added localization valve so the HstRepositoryResourceBundleMessageSource 
		can be used in JaxrsRestPlainPipeline pipeline. http://www.onehippo.org/library/concepts/hst-spring/hst-orderable-valve-support.html -->
	<bean id="jaxrsRestPlainLocalizationValve" parent="abstractValve"
		class="org.hippoecm.hst.core.container.LocalizationValve">
		<property name="valveName" value="jaxrsRestPlainLocalizationValve" />
		<property name="afterValves" value="securityValve, subjectBasedSessionValve" />
		<property name="beforeValves" value="jaxrsRestPlainServiceValve" />
	</bean>

	<bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
        <constructor-arg value="java.lang.Void" />
		<property name="targetObject">
			<bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
                <constructor-arg value="org.hippoecm.hst.core.container.Pipeline" />
				<property name="targetObject" ref="org.hippoecm.hst.core.container.Pipelines" />
				<property name="targetMethod" value="getPipeline" />
				<property name="arguments">
                    <list>
					   <value>JaxrsRestPlainPipeline</value>
                    </list>
				</property>
			</bean>
		</property>
		<property name="targetMethod" value="addProcessingValve" />
		<property name="arguments">
            <list>
			  <ref bean="jaxrsRestPlainLocalizationValve" />
            </list>
		</property>
	</bean>
</beans>
